---
kind: pipeline
type: docker
name: default

# The 'integration-test' and 'cleanup' steps need access to the Docker
# socket to run Vagrant with the Docker provider.
# volumes:
#   - name: dockersock
#     host:
#       path: /var/run/docker.sock

steps:
  # Step 1: Lint the main provisioning script for common errors.
  - name: debug
    image: alpine
    commands:
      - 'echo "Repository: glenux/service-drone-runner"'
      - 'echo "Git commit: ${DRONE_COMMIT_SHA:0:8}"'


  - name: lint-shell-script
    image: debian:12
    commands:
      - apt-get update
      - apt-get install -q -y shellcheck
      - shellcheck provision.sh

  # Step 2: Validate the Vagrantfile syntax.
  - name: validate-vagrantfile
    image: debian:12
    commands:
      - apt-get update
      - apt-get install -q -y gpg wget
      - wget -O - https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com bookworm main" | tee /etc/apt/sources.list.d/hashicorp.list
      - apt-get update
      - apt-get install -q -y vagrant
      - vagrant validate --ignore-provider

    #  # Step 3: Run the full provisioning script inside a Docker container.
    #  # This acts as the main integration test.
    #  - name: integration-test
    #    image: hashicorp/vagrant:2.4.1
    #    # volumes:
    #    #   - name: dockersock
    #    #     path: /var/run/docker.sock
    #    commands:
    #      # The base vagrant image needs the docker client to talk to the host daemon
    #      - apk add --no-cache docker-cli
    #      - vagrant plugin install vagrant-docker
    #      - echo "--> Starting Vagrant with Docker provider..."
    #      - vagrant up --provider=docker
    #      - echo "--> Vagrant up complete. Verifying installed tools..."
    #      # Use `vagrant ssh` to run verification commands inside the container
    #      - vagrant ssh -c "command -v aider && aider --version"
    #      - vagrant ssh -c "command -v claude-code"
    #      - vagrant ssh -c "command -v crush"
    #      - vagrant ssh -c "command -v goose"
    #      - vagrant ssh -c "asdf --version"
    #      - vagrant ssh -c "direnv --version"
    #      - vagrant ssh -c "code-server --version"
    #      - echo "--> Verification successful."
    #    depends_on:
    #      - lint-shell-script
    #      - validate-vagrantfile
    #
    #  # Step 4: Clean up the Vagrant environment, regardless of success or failure.
    #  - name: cleanup
    #    image: hashicorp/vagrant:2.4.1
    #    volumes:
    #      - name: dockersock
    #        path: /var/run/docker.sock
    #    commands:
    #      - apk add --no-cache docker-cli
    #      - vagrant plugin install vagrant-docker
    #      - echo "--> Destroying Vagrant Docker environment..."
    #      - vagrant destroy --provider=docker -f
    #    # This 'when' clause ensures the cleanup step always runs.
    #    when:
    #      status:
    #        - success
    #        - failure
    #    depends_on:
    #      - integration-test
    #
services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: cache
    temp: {}
  - name: dockersock
    temp: {}

